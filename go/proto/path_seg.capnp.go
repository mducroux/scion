// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PathSegment struct{ capnp.Struct }

// PathSegment_TypeID is the unique identifier for the type PathSegment.
const PathSegment_TypeID = 0x939cc09a86ba70fa

func NewPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func NewRootPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func ReadRootPathSegment(msg *capnp.Message) (PathSegment, error) {
	root, err := msg.RootPtr()
	return PathSegment{root.Struct()}, err
}

func (s PathSegment) String() string {
	str, _ := text.Marshal(0x939cc09a86ba70fa, s.Struct)
	return str
}

func (s PathSegment) Sdata() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegment) HasSdata() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetSdata(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PathSegment) AsEntries() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s PathSegment) HasAsEntries() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetAsEntries(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsEntries sets the asEntries field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s PathSegment) NewAsEntries(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// PathSegment_List is a list of PathSegment.
type PathSegment_List struct{ capnp.List }

// NewPathSegment creates a new list of PathSegment.
func NewPathSegment_List(s *capnp.Segment, sz int32) (PathSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PathSegment_List{l}, err
}

func (s PathSegment_List) At(i int) PathSegment { return PathSegment{s.List.Struct(i)} }

func (s PathSegment_List) Set(i int, v PathSegment) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegment_List) String() string {
	str, _ := text.MarshalList(0x939cc09a86ba70fa, s.List)
	return str
}

// PathSegment_Promise is a wrapper for a PathSegment promised by a client call.
type PathSegment_Promise struct{ *capnp.Pipeline }

func (p PathSegment_Promise) Struct() (PathSegment, error) {
	s, err := p.Pipeline.Struct()
	return PathSegment{s}, err
}

type PathSegmentSignedData struct{ capnp.Struct }

// PathSegmentSignedData_TypeID is the unique identifier for the type PathSegmentSignedData.
const PathSegmentSignedData_TypeID = 0xc7cf7a18177aec2a

func NewPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func NewRootPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func ReadRootPathSegmentSignedData(msg *capnp.Message) (PathSegmentSignedData, error) {
	root, err := msg.RootPtr()
	return PathSegmentSignedData{root.Struct()}, err
}

func (s PathSegmentSignedData) String() string {
	str, _ := text.Marshal(0xc7cf7a18177aec2a, s.Struct)
	return str
}

func (s PathSegmentSignedData) InfoF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegmentSignedData) HasInfoF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegmentSignedData) SetInfoF(v []byte) error {
	return s.Struct.SetData(0, v)
}

// PathSegmentSignedData_List is a list of PathSegmentSignedData.
type PathSegmentSignedData_List struct{ capnp.List }

// NewPathSegmentSignedData creates a new list of PathSegmentSignedData.
func NewPathSegmentSignedData_List(s *capnp.Segment, sz int32) (PathSegmentSignedData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PathSegmentSignedData_List{l}, err
}

func (s PathSegmentSignedData_List) At(i int) PathSegmentSignedData {
	return PathSegmentSignedData{s.List.Struct(i)}
}

func (s PathSegmentSignedData_List) Set(i int, v PathSegmentSignedData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathSegmentSignedData_List) String() string {
	str, _ := text.MarshalList(0xc7cf7a18177aec2a, s.List)
	return str
}

// PathSegmentSignedData_Promise is a wrapper for a PathSegmentSignedData promised by a client call.
type PathSegmentSignedData_Promise struct{ *capnp.Pipeline }

func (p PathSegmentSignedData_Promise) Struct() (PathSegmentSignedData, error) {
	s, err := p.Pipeline.Struct()
	return PathSegmentSignedData{s}, err
}

type ASEntry struct{ capnp.Struct }
type ASEntry_exts ASEntry

// ASEntry_TypeID is the unique identifier for the type ASEntry.
const ASEntry_TypeID = 0xd4a209e8e78874ff

func NewASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5})
	return ASEntry{st}, err
}

func NewRootASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5})
	return ASEntry{st}, err
}

func ReadRootASEntry(msg *capnp.Message) (ASEntry, error) {
	root, err := msg.RootPtr()
	return ASEntry{root.Struct()}, err
}

func (s ASEntry) String() string {
	str, _ := text.Marshal(0xd4a209e8e78874ff, s.Struct)
	return str
}

func (s ASEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASEntry) TrcVer() uint64 {
	return s.Struct.Uint64(8)
}

func (s ASEntry) SetTrcVer(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ASEntry) CertVer() uint64 {
	return s.Struct.Uint64(16)
}

func (s ASEntry) SetCertVer(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ASEntry) IfIDSize() uint8 {
	return s.Struct.Uint8(24)
}

func (s ASEntry) SetIfIDSize(v uint8) {
	s.Struct.SetUint8(24, v)
}

func (s ASEntry) Hops() (HopEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return HopEntry_List{List: p.List()}, err
}

func (s ASEntry) HasHops() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASEntry) SetHops(v HopEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHops sets the hops field to a newly
// allocated HopEntry_List, preferring placement in s's segment.
func (s ASEntry) NewHops(n int32) (HopEntry_List, error) {
	l, err := NewHopEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return HopEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ASEntry) Mtu() uint16 {
	return s.Struct.Uint16(26)
}

func (s ASEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(26, v)
}

func (s ASEntry) Exts() ASEntry_exts { return ASEntry_exts(s) }

func (s ASEntry_exts) RoutingPolicy() (RoutingPolicyExt, error) {
	p, err := s.Struct.Ptr(1)
	return RoutingPolicyExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasRoutingPolicy() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetRoutingPolicy(v RoutingPolicyExt) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRoutingPolicy sets the routingPolicy field to a newly
// allocated RoutingPolicyExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewRoutingPolicy() (RoutingPolicyExt, error) {
	ss, err := NewRoutingPolicyExt(s.Struct.Segment())
	if err != nil {
		return RoutingPolicyExt{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) Sibra() (SibraPCBExt, error) {
	p, err := s.Struct.Ptr(2)
	return SibraPCBExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasSibra() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetSibra(v SibraPCBExt) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPCBExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewSibra() (SibraPCBExt, error) {
	ss, err := NewSibraPCBExt(s.Struct.Segment())
	if err != nil {
		return SibraPCBExt{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) HiddenPathSeg() (HiddenPathSegExtn, error) {
	p, err := s.Struct.Ptr(3)
	return HiddenPathSegExtn{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasHiddenPathSeg() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetHiddenPathSeg(v HiddenPathSegExtn) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewHiddenPathSeg sets the hiddenPathSeg field to a newly
// allocated HiddenPathSegExtn struct, preferring placement in s's segment.
func (s ASEntry_exts) NewHiddenPathSeg() (HiddenPathSegExtn, error) {
	ss, err := NewHiddenPathSegExtn(s.Struct.Segment())
	if err != nil {
		return HiddenPathSegExtn{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) StaticInfo() (StaticInfoExtn, error) {
	p, err := s.Struct.Ptr(4)
	return StaticInfoExtn{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasStaticInfo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetStaticInfo(v StaticInfoExtn) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewStaticInfo sets the staticInfo field to a newly
// allocated StaticInfoExtn struct, preferring placement in s's segment.
func (s ASEntry_exts) NewStaticInfo() (StaticInfoExtn, error) {
	ss, err := NewStaticInfoExtn(s.Struct.Segment())
	if err != nil {
		return StaticInfoExtn{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

// ASEntry_List is a list of ASEntry.
type ASEntry_List struct{ capnp.List }

// NewASEntry creates a new list of ASEntry.
func NewASEntry_List(s *capnp.Segment, sz int32) (ASEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5}, sz)
	return ASEntry_List{l}, err
}

func (s ASEntry_List) At(i int) ASEntry { return ASEntry{s.List.Struct(i)} }

func (s ASEntry_List) Set(i int, v ASEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ASEntry_List) String() string {
	str, _ := text.MarshalList(0xd4a209e8e78874ff, s.List)
	return str
}

// ASEntry_Promise is a wrapper for a ASEntry promised by a client call.
type ASEntry_Promise struct{ *capnp.Pipeline }

func (p ASEntry_Promise) Struct() (ASEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry{s}, err
}

func (p ASEntry_Promise) Exts() ASEntry_exts_Promise { return ASEntry_exts_Promise{p.Pipeline} }

// ASEntry_exts_Promise is a wrapper for a ASEntry_exts promised by a client call.
type ASEntry_exts_Promise struct{ *capnp.Pipeline }

func (p ASEntry_exts_Promise) Struct() (ASEntry_exts, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry_exts{s}, err
}

func (p ASEntry_exts_Promise) RoutingPolicy() RoutingPolicyExt_Promise {
	return RoutingPolicyExt_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ASEntry_exts_Promise) Sibra() SibraPCBExt_Promise {
	return SibraPCBExt_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p ASEntry_exts_Promise) HiddenPathSeg() HiddenPathSegExtn_Promise {
	return HiddenPathSegExtn_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

func (p ASEntry_exts_Promise) StaticInfo() StaticInfoExtn_Promise {
	return StaticInfoExtn_Promise{Pipeline: p.Pipeline.GetPipeline(4)}
}

type HopEntry struct{ capnp.Struct }

// HopEntry_TypeID is the unique identifier for the type HopEntry.
const HopEntry_TypeID = 0x8bb1ddafb4872b0b

func NewHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return HopEntry{st}, err
}

func NewRootHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return HopEntry{st}, err
}

func ReadRootHopEntry(msg *capnp.Message) (HopEntry, error) {
	root, err := msg.RootPtr()
	return HopEntry{root.Struct()}, err
}

func (s HopEntry) String() string {
	str, _ := text.Marshal(0x8bb1ddafb4872b0b, s.Struct)
	return str
}

func (s HopEntry) InIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HopEntry) SetInIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HopEntry) RemoteInIF() uint64 {
	return s.Struct.Uint64(8)
}

func (s HopEntry) SetRemoteInIF(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HopEntry) InMTU() uint16 {
	return s.Struct.Uint16(16)
}

func (s HopEntry) SetInMTU(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s HopEntry) OutIA() uint64 {
	return s.Struct.Uint64(24)
}

func (s HopEntry) SetOutIA(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s HopEntry) RemoteOutIF() uint64 {
	return s.Struct.Uint64(32)
}

func (s HopEntry) SetRemoteOutIF(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s HopEntry) HopF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HopEntry) HasHopF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HopEntry) SetHopF(v []byte) error {
	return s.Struct.SetData(0, v)
}

// HopEntry_List is a list of HopEntry.
type HopEntry_List struct{ capnp.List }

// NewHopEntry creates a new list of HopEntry.
func NewHopEntry_List(s *capnp.Segment, sz int32) (HopEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return HopEntry_List{l}, err
}

func (s HopEntry_List) At(i int) HopEntry { return HopEntry{s.List.Struct(i)} }

func (s HopEntry_List) Set(i int, v HopEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s HopEntry_List) String() string {
	str, _ := text.MarshalList(0x8bb1ddafb4872b0b, s.List)
	return str
}

// HopEntry_Promise is a wrapper for a HopEntry promised by a client call.
type HopEntry_Promise struct{ *capnp.Pipeline }

func (p HopEntry_Promise) Struct() (HopEntry, error) {
	s, err := p.Pipeline.Struct()
	return HopEntry{s}, err
}

type PCB struct{ capnp.Struct }

// PCB_TypeID is the unique identifier for the type PCB.
const PCB_TypeID = 0xd6c04763377951e5

func NewPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func NewRootPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func ReadRootPCB(msg *capnp.Message) (PCB, error) {
	root, err := msg.RootPtr()
	return PCB{root.Struct()}, err
}

func (s PCB) String() string {
	str, _ := text.Marshal(0xd6c04763377951e5, s.Struct)
	return str
}

func (s PCB) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PCB) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PCB) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PCB) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PCB) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s PCB) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PCB_List is a list of PCB.
type PCB_List struct{ capnp.List }

// NewPCB creates a new list of PCB.
func NewPCB_List(s *capnp.Segment, sz int32) (PCB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PCB_List{l}, err
}

func (s PCB_List) At(i int) PCB { return PCB{s.List.Struct(i)} }

func (s PCB_List) Set(i int, v PCB) error { return s.List.SetStruct(i, v.Struct) }

func (s PCB_List) String() string {
	str, _ := text.MarshalList(0xd6c04763377951e5, s.List)
	return str
}

// PCB_Promise is a wrapper for a PCB promised by a client call.
type PCB_Promise struct{ *capnp.Pipeline }

func (p PCB_Promise) Struct() (PCB, error) {
	s, err := p.Pipeline.Struct()
	return PCB{s}, err
}

func (p PCB_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegMeta struct{ capnp.Struct }

// PathSegMeta_TypeID is the unique identifier for the type PathSegMeta.
const PathSegMeta_TypeID = 0x9f98567b3c0aba0f

func NewPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func NewRootPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func ReadRootPathSegMeta(msg *capnp.Message) (PathSegMeta, error) {
	root, err := msg.RootPtr()
	return PathSegMeta{root.Struct()}, err
}

func (s PathSegMeta) String() string {
	str, _ := text.Marshal(0x9f98567b3c0aba0f, s.Struct)
	return str
}

func (s PathSegMeta) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PathSegMeta) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegMeta) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PathSegMeta) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathSegMeta) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s PathSegMeta) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// PathSegMeta_List is a list of PathSegMeta.
type PathSegMeta_List struct{ capnp.List }

// NewPathSegMeta creates a new list of PathSegMeta.
func NewPathSegMeta_List(s *capnp.Segment, sz int32) (PathSegMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathSegMeta_List{l}, err
}

func (s PathSegMeta_List) At(i int) PathSegMeta { return PathSegMeta{s.List.Struct(i)} }

func (s PathSegMeta_List) Set(i int, v PathSegMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegMeta_List) String() string {
	str, _ := text.MarshalList(0x9f98567b3c0aba0f, s.List)
	return str
}

// PathSegMeta_Promise is a wrapper for a PathSegMeta promised by a client call.
type PathSegMeta_Promise struct{ *capnp.Pipeline }

func (p PathSegMeta_Promise) Struct() (PathSegMeta, error) {
	s, err := p.Pipeline.Struct()
	return PathSegMeta{s}, err
}

func (p PathSegMeta_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegType uint16

// PathSegType_TypeID is the unique identifier for the type PathSegType.
const PathSegType_TypeID = 0xa1f7a9650aa23880

// Values of PathSegType.
const (
	PathSegType_unset PathSegType = 0
	PathSegType_up    PathSegType = 1
	PathSegType_down  PathSegType = 2
	PathSegType_core  PathSegType = 3
)

// String returns the enum's constant name.
func (c PathSegType) String() string {
	switch c {
	case PathSegType_unset:
		return "unset"
	case PathSegType_up:
		return "up"
	case PathSegType_down:
		return "down"
	case PathSegType_core:
		return "core"

	default:
		return ""
	}
}

// PathSegTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PathSegTypeFromString(c string) PathSegType {
	switch c {
	case "unset":
		return PathSegType_unset
	case "up":
		return PathSegType_up
	case "down":
		return PathSegType_down
	case "core":
		return PathSegType_core

	default:
		return 0
	}
}

type PathSegType_List struct{ capnp.List }

func NewPathSegType_List(s *capnp.Segment, sz int32) (PathSegType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PathSegType_List{l.List}, err
}

func (l PathSegType_List) At(i int) PathSegType {
	ul := capnp.UInt16List{List: l.List}
	return PathSegType(ul.At(i))
}

func (l PathSegType_List) Set(i int, v PathSegType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_fb8053d9fb34b837 = "x\xda\xacT]h\x1cU\x18\xfd\xce\xfdfw\x93H" +
	"\x9c\x1dv\xa5\xa9\x08kEAW[jZM)J" +
	"L\xed_\x84\xe0\xde\xa6\xb6\xe8\x83v\xba;I\x06\x92" +
	"\xd9a\xe7.\xcdF\xa4y\x89?h\xf1\xc1\"\xa64" +
	"\xa4-\x0a\x06\x1a\xac\xd8B\x12,$\xa5P\x04\xc1\x17" +
	"\x11\x8d\x14\xac\xb6\xd4\x82o>\x88-:rw3\xbb" +
	"K\xd2\xbe\xf9v\xe7\x9bs\xbf\xef\x9es\xcf\xb9\x9b[" +
	"\xc5\x0b\xe2\xe9\xd8\x15A$\x1f\x8e\xc5\xc3\xfb\x9e|\xe7" +
	"\xfc\x17W\xbf|\x9f\xa4\x89X\xd85\xb7\xf5\xceO\xfd" +
	"\xe3w(\x86\x04Q\xaa\x17\x97RR\xaf\xb6\xf4\xe1 " +
	"\x08\xe1m\x7f\xe1\xed\x13\x8b'?\"\xcbD\x13Xh" +
	"\xf0i\xb1\x9c\x9a\xad\xaef\xc4\x11Bh.\xb4=\xf7" +
	"\xe6\x81O\xa6ug\xac\xee\xbc\x9e\x97S\x8f\xb1^m" +
	"`\x0d\x1e\xdfv\xa6\xcd\x99\xf9\xeb4Y\xa6h`\x09" +
	"\xa9\xb7x9\xf5^\x158\xc1\x83\x840\x9c\x9e\x98\xfa" +
	"\xb7M]\"\xb9\x0eF\x18\xaawo\xfe\xdez\xe6{" +
	"z \x96\x80\x9e\xcc\xbf\x12R\xb3|\x93\x10f\xff\x18" +
	"[\xd71\xf6\xdd\x95Ug\xad\xd29fd\x91\x9a2" +
	"t\xdbI\xa3[\xb7\x8d\x1aI\x13F\x13:\xa6!\xf3" +
	"\xc6BjI\x83\xb7\\4>\xd42\xdc\x90\x95\xae\xfc" +
	"\x9e\xc5\x1f\xeeJ\xed\xf9\xf8\x89\xd4\xae\xb8^\xf5\xc45" +
	"5\xdfVCo\x04\xce\xa0\xd8\x94\xb7}\xcf\xdf\xbe\xb7" +
	"\xe8\xef\xf2T\xa9B9@v\xb0Ad\x80\xc8\x9a\xcc" +
	"\x12\xc9\xe3\x0cyJ\xc0\x02\xd2\xd0\xc5\xa9\xd7\x88\xe4I" +
	"\x86\xfc\\\xc0\x12-i\x08\"\xeb\xb3N\"y\x8a!" +
	"\xcf\x0aX\xcci0\x915\xa3\x8b\x9f2\xe49\x01\xcb" +
	"0\xd20\x88\xac\xd9\xc3D\xf2,C\xce\x09 \x96F" +
	"\x8c\xc8\xba\xa0\xe7\x9cc\xc8\xaf\x05L\xd7\xeb\xedA+" +
	"\x09\xb4\x12\xc2\x923RTN\xafG\xdc\xbb;*f" +
	"\\\xafo\xff+H\x90@\x82\x90)\x96\xd5\x9a\x0d/" +
	"\x97)\xa1\x1a;\xcc\xa1\xa2\xbf\x1b\xed$\xd0~\x17\xf2" +
	"9[\x0d\xf5;\x83#\x0e{J\xf3o\xa9\xf3\x7fB" +
	"\x13x\x94!77\xf1\xdf\xb8\x8fH>\xc5\x90{\x05" +
	"2A\xc1Vv\xbd\xb3\x1dh\x15]\x87\x10\xe0~B" +
	"\x8e\x81d\xb8\xef\xb7\xdb]\x13{:\xa7\x89\xa0\x8b\xf7" +
	"\x1a\xdf\xe7\xb0\xb2W\x8d\xdf\xd1\x18_\x9f\xae\xa5z\x9c" +
	"!\xb7\x0a\x1c\xf5k[\x91l\x84\x80\x80$\xc1T\x15" +
	"\xdf\x81\xd9\xb00\x01\xe6\xbdg\xef\xaf\xb0\xef\xe8\xd9\xc9" +
	"\xeaej\xda\x80\xb5\xe1A\"\x08k}\x96\x08lY" +
	"Y\xa2L\xd9\x0b\x1c\xc5e\xdf,\x14\x8fxf\xbeX" +
	"r\xd6\xb4\xec\xe9\xaf:i\x93\x93\x18U\x81L\xb2\x91" +
	"D\x1aq\"\xcb.\x11\xc9C\x0c9\xac\xc5\x14im" +
	"L\xcb\xd5\x0a\x17\x18\xd2\xd7f\xe24Z\x88\xac\x11\x8d" +
	"\x1cf\xc8Qm&#\x8dV\"\xab\xacm\xa7\x18r" +
	"\\ ,\x15\xcb\xca\xf5\x06s\x94)\x0e\xbb\xf9\x0a\x92" +
	"\xe1\xdf\xd7\x9f\xd96\xb7\xbc\xf4\xf1\x8a\x00\x99\xc0=\\" +
	"\xb2\x91\x0c\x8f\x1d\xba\xf5\xea\xfc\xad\x7f\xe6V\xea\xe1\x90" +
	"[(8^\xce\xa6L$\xdd\x9f\x1f\xdc\xb86\xf9U" +
	"%\x8c\x10\x81\xb2\x95\x9b\xd7\x96\x1b(\"\x19\x1e\xdc\xe8" +
	"\x1c\x7f\xf6\xf5\xdc\xcf\xd1\xef\x88/\xafv\x8f\xa7\xfa\xdd" +
	"A\xcf)\x98;\xed\xdaE\x1a\xf5\x8bl\xd7,[\x18" +
	"2-\xb4{\x07\x8ak\xcd\x88H\xbe\xee\x9a~\xba\xc1" +
	"C\xf5\x06\x17:\x1b\x01\xa9\x1bq~;\x91<\xcf\x90" +
	"\x8bZ;Q\x0b\xe2E\xed\x999\x86\xbc\xac\xb5\xeb\xa8" +
	"\x05q\xe9%\"\xb9\xc8\x90\xdf\x0a`%\x87\xdfh#" +
	"]f\xc8_\x04\xacX{-\x88W\x1f!\x92?2" +
	"\xe4u\x01\xc4\xd1\xf4\xb4Y\xd7\xb2$2nP\xb0\x83" +
	"(U\xdd\xaa\x94?\xe0\x94\xa2\xcf\xa3y\xa7\xa4\x9a\xbe" +
	"Cw\xa0wg\xbf;\xe6\x10\x11\xe2$\x10\xaf\x05\xb1" +
	")\x1a\xf5\x87\xbe\x16\x8d\xc4\x88*G\xb16\x9dQ\x15" +
	"\xacQ'\xc7/\xee\xf8\xdf2\xa2\xcf\x17\x1d\xf6\xbf\x00" +
	"\x00\x00\xff\xffe%\x9c\x88"

func init() {
	schemas.Register(schema_fb8053d9fb34b837,
		0x8bb1ddafb4872b0b,
		0x939cc09a86ba70fa,
		0x9f98567b3c0aba0f,
		0xa1f7a9650aa23880,
		0xc2740afe9d859fff,
		0xc7cf7a18177aec2a,
		0xd4a209e8e78874ff,
		0xd6c04763377951e5)
}
